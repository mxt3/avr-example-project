# Makefile for avr target
#==========================
# Uses avr-gcc toolchain

# written as an exercie to Makefile
# goal is to have as little as possible depency information in the make file
# e.g. avoid having to add every object file, and saying of which headers it depends
# You only need to manually update the SRCs variable.
# Other dependence information is extracted by gcc, using the flags of the
# GENDEPFLAGS variable.
# This creates makefiles in the .dep folder, which have rules expressing 
# the dependencies (on e.g. the header files), but which don't contain any commands.
# These are included at the end of this file.

# Parameters and configuration
# ==============================

# device parameters
# -------------------
MCU		= atmega328p
# clock frequnecy
F_CPU	= 16000000UL

# avrdude parameters
# -------------------
PORT	= COM5
PART	= $(MCU)
BAUDR	= 115200
PROGRAMMER=arduino # this must be a programmer in avrdude.conf

# tools
# -------------------
# Note: Requires AVR_ROOT env variable to path of avr tools
CC		= $(AVR_ROOT)/avr-gcc
CXX		= $(AVR_ROOT)/avr-g++
OBJCOPY	= $(AVR_ROOT)/avr-objcopy
AVERDUDE= $(AVR_ROOT)/avrdude

RM	= cmd /Q /F /C del 

CPPFLAGS  = -Wall -Wextra -Wpedantic
CPPFLAGS += -std=c++14 
# Macro's to be defined
CPPFLAGS += -DF_CPU=$(F_CPU)
# MCU
CPPFLAGS += -mmcu=$(MCU)
CPPFLAGS += -O0
CPPFLAGS += -fpermissive -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics
# TODO: study other flags (e.g. arduino)


# Compiler flags to generate dependency files.
GENDEPFLAGS = -MD -MP -MF .dep/$(@F).d
ALL_CPPFLAGS = $(CPPFLAGS) $(GENDEPFLAGS)

# files
TARGET 	= main
# list c source files, seperated by spaces. 
# Dependencies are auto-generated by gcc
SRC		= main.cpp foo.cpp
# auto make obj list from SRC list
OBJ		= ${SRC:.cpp=.o}

# avrdude flags
AVRDUDE_FLAGS = -v -p $(PART) -c $(PROGRAMMER) -P $(PORT) -b $(BAUDR) -D -Uflash:w:$(TARGET).hex:i

# Rules
# ====================


.PHONY: all
all: $(TARGET).hex

.PHONY: elf
elf: $(TARGET).elf

%.hex: %.elf
	@echo;
	@echo Making final file $@;
	$(OBJCOPY) -O ihex -R .eeprom $< $@

%.elf: $(OBJ)
	@echo;
	@echo Linking $@;
	$(CC) $(ALL_CPFLAGS) $^ --output $@ $(LDFLAGS)

%.o : %.cpp
	@echo;
	@echo Compiling $<;
	$(CC) -c $(ALL_CPPFLAGS) $< -o $@


.PHONEY: flash
flash: $(TARGET).hex
	@echo;
	@echo Uploading $@;
	$(AVERDUDE) $(AVRDUDE_FLAGS)

#TODO: clean rule. Not at all cross platform
.PHONEY: clean
clean:
	$(RM) .dep\*
	$(RM) $(OBJ)

# Include dependency makefiles generated by 
# '-' silence if does not exists
-include $(wildcard .dep/*)

